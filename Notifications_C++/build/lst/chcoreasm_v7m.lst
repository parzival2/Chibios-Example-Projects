ARM GAS  /tmp/ccFP4z5S.s 			page 1


   1              	# 1 "/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chc
   1              	/*
   1              	...
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    compilers/GCC/chcoreasm_v7m.S
  22              	 * @brief   ARMv7-M architecture port low level code.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#if !defined(FALSE) || defined(__DOXYGEN__)
  29              	#define FALSE   0
  30              	#endif
  31              	
  32              	#if !defined(TRUE) || defined(__DOXYGEN__)
  33              	#define TRUE    1
  34              	#endif
  35              	
  36              	#define _FROM_ASM_
  37              	#include "chlicense.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
ARM GAS  /tmp/ccFP4z5S.s 			page 2


  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    chlicense.h
  22              	 * @brief   License Module macros and structures.
  23              	 *
  24              	 * @addtogroup license
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CHLICENSE_H
  29              	#define CHLICENSE_H
  30              	
  31              	/*===========================================================================*/
  32              	/* Module constants.                                                         */
  33              	/*===========================================================================*/
  34              	
  35              	/**
  36              	 * @name   Allowed Features Levels
  37              	 * @{
  38              	 */
  39              	#define CH_FEATURES_BASIC                   0
  40              	#define CH_FEATURES_INTERMEDIATE            1
  41              	#define CH_FEATURES_FULL                    2
  42              	/** @} */
  43              	
  44              	/**
  45              	 * @name    Deployment Options
  46              	 */
  47              	#define CH_DEPLOY_UNLIMITED                -1
  48              	#define CH_DEPLOY_NONE                      0
  49              	/** @} */
  50              	
  51              	/**
  52              	 * @name    Licensing Options
  53              	 * @{
  54              	 */
  55              	#define CH_LICENSE_GPL                      0
  56              	#define CH_LICENSE_GPL_EXCEPTION            1
  57              	#define CH_LICENSE_COMMERCIAL_FREE          2
  58              	#define CH_LICENSE_COMMERCIAL_DEV_1000      3
  59              	#define CH_LICENSE_COMMERCIAL_DEV_5000      4
  60              	#define CH_LICENSE_COMMERCIAL_FULL          5
  61              	#define CH_LICENSE_COMMERCIAL_RUNTIME       6
  62              	#define CH_LICENSE_PARTNER                  7
  63              	/** @} */
  64              	
  65              	#include "chcustomer.h"
   1              	/*
  66              	#if CH_LICENSE == CH_LICENSE_PARTNER
  38              	#include "chconf.h"
   1              	/*
  39              	#include "chcore.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3              	
ARM GAS  /tmp/ccFP4z5S.s 			page 3


   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    ARMCMx/chcore.h
  22              	 * @brief   ARM Cortex-Mx port macros and structures.
  23              	 *
  24              	 * @addtogroup ARMCMx_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CHCORE_H
  29              	#define CHCORE_H
  30              	
  31              	/*===========================================================================*/
  32              	/* Module constants.                                                         */
  33              	/*===========================================================================*/
  34              	
  35              	/**
  36              	 * @name    Architecture and Compiler
  37              	 * @{
  38              	 */
  39              	/**
  40              	 * @brief   Macro defining a generic ARM architecture.
  41              	 */
  42              	#define PORT_ARCHITECTURE_ARM
  43              	
  44              	/* The following code is not processed when the file is included from an
  45              	   asm module because those intrinsic macros are not necessarily defined
  46              	   by the assembler too.*/
  47              	#if !defined(_FROM_ASM_)
  48              	
  49              	/**
  50              	 * @brief   Compiler name and version.
  51              	 */
  52              	#if defined(__GNUC__) || defined(__DOXYGEN__)
  53              	#define PORT_COMPILER_NAME              "GCC " __VERSION__
  54              	
  55              	#elif defined(__ICCARM__)
  56              	#define PORT_COMPILER_NAME              "IAR"
  57              	
  58              	#elif defined(__CC_ARM)
  59              	#define PORT_COMPILER_NAME              "RVCT"
  60              	
ARM GAS  /tmp/ccFP4z5S.s 			page 4


  61              	#else
  62              	#error "unsupported compiler"
  63              	#endif
  64              	
  65              	#endif /* !defined(_FROM_ASM_) */
  66              	
  67              	/** @} */
  68              	
  69              	/* Inclusion of the Cortex-Mx implementation specific parameters.*/
  70              	#include "cmparams.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    STM32F4xx/cmparams.h
  19              	 * @brief   ARM Cortex-M4 parameters for the STM32F4xx.
  20              	 *
  21              	 * @defgroup ARMCMx_STM32F4xx STM32F4xx Specific Parameters
  22              	 * @ingroup ARMCMx_SPECIFIC
  23              	 * @details This file contains the Cortex-M4 specific parameters for the
  24              	 *          STM32F4xx platform.
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CMPARAMS_H
  29              	#define CMPARAMS_H
  30              	
  31              	/**
  32              	 * @brief   Cortex core model.
  33              	 */
  34              	#define CORTEX_MODEL            4
  35              	
  36              	/**
  37              	 * @brief   Floating Point unit presence.
  38              	 */
  39              	#define CORTEX_HAS_FPU          1
  40              	
  41              	/**
  42              	 * @brief   Number of bits in priority masks.
  43              	 */
  44              	#define CORTEX_PRIORITY_BITS    4
  45              	
  46              	/* If the device type is not externally defined, for example from the Makefile,
  47              	   then a file named board.h is included. This file must contain a device
ARM GAS  /tmp/ccFP4z5S.s 			page 5


  48              	   definition compatible with the vendor include file.*/
  49              	#if !defined(STM32F405xx) && !defined(STM32F415xx) &&                       \
  50              	    !defined(STM32F407xx) && !defined(STM32F417xx) &&                       \
  51              	    !defined(STM32F427xx) && !defined(STM32F437xx) &&                       \
  52              	    !defined(STM32F429xx) && !defined(STM32F439xx) &&                       \
  53              	    !defined(STM32F401xC) && !defined(STM32F401xE) &&                       \
  54              	    !defined(STM32F410Cx) && !defined(STM32F410Rx) &&                       \
  55              	    !defined(STM32F411xE) && !defined(STM32F446xx) &&                       \
  56              	    !defined(STM32F469xx) && !defined(STM32F479xx)
  57              	#include "board.h"
   1              	/*
  58              	#endif
  71              	
  72              	/*===========================================================================*/
  73              	/* Module pre-compile time settings.                                         */
  74              	/*===========================================================================*/
  75              	
  76              	/**
  77              	 * @brief   Enables an alternative timer implementation.
  78              	 * @details Usually the port uses a timer interface defined in the file
  79              	 *          @p chcore_timer.h, if this option is enabled then the file
  80              	 *          @p chcore_timer_alt.h is included instead.
  81              	 */
  82              	#if !defined(PORT_USE_ALT_TIMER)
  83              	#define PORT_USE_ALT_TIMER              FALSE
  84              	#endif
  85              	
  86              	/*===========================================================================*/
  87              	/* Derived constants and error checks.                                       */
  88              	/*===========================================================================*/
  89              	
  90              	/*===========================================================================*/
  91              	/* Module data structures and types.                                         */
  92              	/*===========================================================================*/
  93              	
  94              	/* The following code is not processed when the file is included from an
  95              	   asm module.*/
  96              	#if !defined(_FROM_ASM_)
  97              	
  98              	/**
  99              	 * @brief   Type of a generic ARM register.
 100              	 */
 101              	typedef void *regarm_t;
 102              	
 103              	/**
 104              	 * @brief   Type of stack and memory alignment enforcement.
 105              	 * @note    In this architecture the stack alignment is enforced to 64 bits,
 106              	 *          32 bits alignment is supported by hardware but deprecated by ARM,
 107              	 *          the implementation choice is to not offer the option.
 108              	 */
 109              	typedef uint64_t stkalign_t;
 110              	
 111              	/* The following declarations are there just for Doxygen documentation, the
 112              	   real declarations are inside the sub-headers being specific for the
 113              	   sub-architectures.*/
 114              	#if defined(__DOXYGEN__)
 115              	/**
ARM GAS  /tmp/ccFP4z5S.s 			page 6


 116              	 * @brief   Interrupt saved context.
 117              	 * @details This structure represents the stack frame saved during a
 118              	 *          preemption-capable interrupt handler.
 119              	 * @note    It is implemented to match the Cortex-Mx exception context.
 120              	 */
 121              	struct port_extctx {};
 122              	
 123              	/**
 124              	 * @brief   System saved context.
 125              	 * @details This structure represents the inner stack frame during a context
 126              	 *          switch.
 127              	 */
 128              	struct port_intctx {};
 129              	#endif /* defined(__DOXYGEN__) */
 130              	
 131              	/**
 132              	 * @brief   Platform dependent part of the @p thread_t structure.
 133              	 * @details In this port the structure just holds a pointer to the
 134              	 *          @p port_intctx structure representing the stack pointer
 135              	 *          at context switch time.
 136              	 */
 137              	struct port_context {
 138              	  struct port_intctx *sp;
 139              	};
 140              	
 141              	#endif /* !defined(_FROM_ASM_) */
 142              	
 143              	/*===========================================================================*/
 144              	/* Module macros.                                                            */
 145              	/*===========================================================================*/
 146              	
 147              	/**
 148              	 * @brief   Total priority levels.
 149              	 */
 150              	#define CORTEX_PRIORITY_LEVELS          (1U << CORTEX_PRIORITY_BITS)
 151              	
 152              	/**
 153              	 * @brief   Minimum priority level.
 154              	 * @details This minimum priority level is calculated from the number of
 155              	 *          priority bits supported by the specific Cortex-Mx implementation.
 156              	 */
 157              	#define CORTEX_MINIMUM_PRIORITY         (CORTEX_PRIORITY_LEVELS - 1)
 158              	
 159              	/**
 160              	 * @brief   Maximum priority level.
 161              	 * @details The maximum allowed priority level is always zero.
 162              	 */
 163              	#define CORTEX_MAXIMUM_PRIORITY         0U
 164              	
 165              	/**
 166              	 * @brief   Priority level to priority mask conversion macro.
 167              	 */
 168              	#define CORTEX_PRIO_MASK(n)                                                 \
 169              	  ((n) << (8U - (unsigned)CORTEX_PRIORITY_BITS))
 170              	
 171              	/**
 172              	 * @brief   Priority level verification macro.
ARM GAS  /tmp/ccFP4z5S.s 			page 7


 173              	 */
 174              	#define PORT_IRQ_IS_VALID_PRIORITY(n)                                       \
 175              	  (((n) >= 0U) && ((n) < CORTEX_PRIORITY_LEVELS))
 176              	
 177              	/**
 178              	 * @brief   Priority level verification macro.
 179              	 */
 180              	#define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n)                                \
 181              	  (((n) >= CORTEX_MAX_KERNEL_PRIORITY) && ((n) < CORTEX_PRIORITY_LEVELS))
 182              	
 183              	/*===========================================================================*/
 184              	/* External declarations.                                                    */
 185              	/*===========================================================================*/
 186              	
 187              	/*===========================================================================*/
 188              	/* Module inline functions.                                                  */
 189              	/*===========================================================================*/
 190              	
 191              	/* Includes the sub-architecture-specific part.*/
 192              	#if (CORTEX_MODEL == 0) || (CORTEX_MODEL == 1)
 193              	#include "chcore_v6m.h"
 194              	#elif (CORTEX_MODEL == 3) || (CORTEX_MODEL == 4) || (CORTEX_MODEL == 7)
 195              	#include "mpu.h"
   1              	/*
 196              	#include "chcore_v7m.h"
   1              	/*
 197              	#else
  40              	
  41              	#if !defined(__DOXYGEN__)
  42              	
  43              	/*
  44              	 * RTOS-specific context offset.
  45              	 */
  46              	#if defined(_CHIBIOS_RT_CONF_)
  47              	#define CONTEXT_OFFSET  12
  48              	#elif defined(_CHIBIOS_NIL_CONF_)
  49              	#define CONTEXT_OFFSET  0
  50              	#else
  51              	#error "invalid chconf.h"
  52              	#endif
  53              	
  54              	                .set    SCB_ICSR, 0xE000ED04
  55              	                .set    ICSR_PENDSVSET, 0x10000000
  56              	
  57              	                .syntax unified
  58              	                .cpu    cortex-m4
  59              	#if CORTEX_USE_FPU
  60              	                .fpu    fpv4-sp-d16
  61              	#else
  62              	                .fpu    softvfp
  63              	#endif
  64              	
  65              	                .thumb
  66              	                .text
  67              	
  68              	/*--------------------------------------------------------------------------*
  69              	 * Performs a context switch between two threads.
ARM GAS  /tmp/ccFP4z5S.s 			page 8


  70              	 *--------------------------------------------------------------------------*/
  71              	                .thumb_func
  72              	                .globl  _port_switch
  73              	_port_switch:
  74 0000 2DE9F04F 	                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  75              	#if CORTEX_USE_FPU
  76              	                vpush   {s16-s31}
  77              	#endif
  78              	
  79 0004 C1F80CD0 	                str     sp, [r1, #CONTEXT_OFFSET]
  80              	#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
  81              	    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
  82              	                /* Workaround for ARM errata 752419, only applied if
  83              	                   condition exists for it to be triggered.*/
  84 0008 C368     	                ldr     r3, [r0, #CONTEXT_OFFSET]
  85 000a 9D46     	                mov     sp, r3
  86              	#else
  87              	                ldr     sp, [r0, #CONTEXT_OFFSET]
  88              	#endif
  89              	
  90              	#if CORTEX_USE_FPU
  91              	                vpop    {s16-s31}
  92              	#endif
  93 000c BDE8F08F 	                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  94              	
  95              	/*--------------------------------------------------------------------------*
  96              	 * Start a thread by invoking its work function.
  97              	 *
  98              	 * Threads execution starts here, the code leaves the system critical zone
  99              	 * and then jumps into the thread function passed in register R4. The
 100              	 * register R5 contains the thread parameter. The function chThdExit() is
 101              	 * called on thread function return.
 102              	 *--------------------------------------------------------------------------*/
 103              	                .thumb_func
 104              	                .globl  _port_thread_start
 105              	_port_thread_start:
 106              	#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
 107              	                bl      _port_set_region
 108              	#endif
 109              	#if CH_DBG_SYSTEM_STATE_CHECK
 110 0010 FFF7FEFF 	                bl      _dbg_check_unlock
 111              	#endif
 112              	#if CH_DBG_STATISTICS
 113 0014 FFF7FEFF 	                bl      _stats_stop_measure_crit_thd
 114              	#endif
 115              	#if CORTEX_SIMPLIFIED_PRIORITY
 116              	                cpsie   i
 117              	#else
 118 0018 0023     	                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 119 001a 83F31188 	                msr     BASEPRI, r3
 120              	#endif
 121 001e 2846     	                mov     r0, r5
 122 0020 A047     	                blx     r4
 123              	#if defined(_CHIBIOS_RT_CONF_)
 124 0022 0020     	                movs    r0, #0              /* MSG_OK */
 125 0024 FFF7FEFF 	                bl      chThdExit
 126              	#endif
ARM GAS  /tmp/ccFP4z5S.s 			page 9


 127              	#if defined(_CHIBIOS_NIL_CONF_)
 128              	                mov     r3, #0
 129              	                bl      chSysHalt
 130              	#endif
 131              	
 132              	/*--------------------------------------------------------------------------*
 133              	 * Post-IRQ switch code.
 134              	 *
 135              	 * Exception handlers return here for context switching.
 136              	 *--------------------------------------------------------------------------*/
 137              	                .thumb_func
 138              	                .globl  _port_switch_from_isr
 139              	_port_switch_from_isr:
 140              	#if CH_DBG_STATISTICS
 141 0028 FFF7FEFF 	                bl      _stats_start_measure_crit_thd
 142              	#endif
 143              	#if CH_DBG_SYSTEM_STATE_CHECK
 144 002c FFF7FEFF 	                bl      _dbg_check_lock
 145              	#endif
 146 0030 FFF7FEFF 	                bl      chSchDoReschedule
 147              	#if CH_DBG_SYSTEM_STATE_CHECK
 148 0034 FFF7FEFF 	                bl      _dbg_check_unlock
 149              	#endif
 150              	#if CH_DBG_STATISTICS
 151 0038 FFF7FEFF 	                bl      _stats_stop_measure_crit_thd
 152              	#endif
 153              	                .globl  _port_exit_from_isr
 154              	_port_exit_from_isr:
 155              	#if CORTEX_SIMPLIFIED_PRIORITY
 156              	                movw    r3, #:lower16:SCB_ICSR
 157              	                movt    r3, #:upper16:SCB_ICSR
 158              	                mov     r2, ICSR_PENDSVSET
 159              	                str     r2, [r3, #0]
 160              	                cpsie   i
 161              	#else /* !CORTEX_SIMPLIFIED_PRIORITY */
 162 003c 00DF     	                svc     #0
 163              	#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
 164 003e FEE7     	.L1:            b       .L1
ARM GAS  /tmp/ccFP4z5S.s 			page 10


DEFINED SYMBOLS
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:54     *ABS*:00000000e000ed04 SCB_ICSR
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:55     *ABS*:0000000010000000 ICSR_PENDSVSET
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:73     .text:0000000000000000 _port_switch
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:74     .text:0000000000000000 $t
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:105    .text:0000000000000010 _port_thread_start
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:139    .text:0000000000000028 _port_switch_from_isr
/home/kalyan/Projects/Chibios_Learning/Chibios_18.2.x/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.S:154    .text:000000000000003c _port_exit_from_isr

UNDEFINED SYMBOLS
_dbg_check_unlock
_stats_stop_measure_crit_thd
chThdExit
_stats_start_measure_crit_thd
_dbg_check_lock
chSchDoReschedule
